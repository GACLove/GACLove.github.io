<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://gaclove.github.io/atom.xml" rel="self"/>
  
  <link href="http://gaclove.github.io/"/>
  <updated>2023-10-16T10:32:25.433Z</updated>
  <id>http://gaclove.github.io/</id>
  
  <author>
    <name>gaopeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用的端口</title>
    <link href="http://gaclove.github.io/%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3/"/>
    <id>http://gaclove.github.io/%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3/</id>
    <published>2021-10-16T10:02:40.000Z</published>
    <updated>2023-10-16T10:32:25.433Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>默认端口/路径信息</th><th>服务类型</th></tr></thead><tbody><tr><td>3306</td><td>Mysql系统服务</td></tr><tr><td>1433</td><td>微软SQL服务</td></tr><tr><td>9030</td><td>doris系统服务</td></tr><tr><td>6379</td><td>redis系统服务</td></tr><tr><td>1521</td><td>oracle系统服务</td></tr><tr><td>8123</td><td>clickhouse系统服务</td></tr><tr><td>9092</td><td>Kafka服务</td></tr><tr><td>2049</td><td>nfs服务</td></tr><tr><td>9200/9300</td><td>Elasticsearch服务</td></tr><tr><td>22</td><td>Ssh服务</td></tr><tr><td>20/21</td><td>ftp服务</td></tr><tr><td>161</td><td>SNMP服务</td></tr><tr><td>23</td><td>Telnet服务</td></tr><tr><td>3389</td><td>RDP 远程桌面</td></tr><tr><td>5901</td><td>Vnc服务</td></tr><tr><td>139/445</td><td>SMB服务</td></tr><tr><td>111</td><td>rpnbind</td></tr><tr><td>30000-32767</td><td>k8s 默认映射范围</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;默认端口/路径信息&lt;/th&gt;
&lt;th&gt;服务类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3306&lt;/td&gt;
&lt;td&gt;Mysql系统服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1433&lt;/td&gt;
</summary>
      
    
    
    
    
    <category term="port" scheme="http://gaclove.github.io/tags/port/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg-prebuit的下载链接</title>
    <link href="http://gaclove.github.io/ffmpeg-prebuit%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/"/>
    <id>http://gaclove.github.io/ffmpeg-prebuit%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/</id>
    <published>2021-05-10T10:34:36.000Z</published>
    <updated>2023-10-16T10:32:25.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ffmpeg-预编译的libray和可执行程序"><a class="markdownIt-Anchor" href="#ffmpeg-预编译的libray和可执行程序"></a> FFmpeg 预编译的libray和可执行程序</h2><p><a href="https://github.com/BtbN/FFmpeg-Builds/releases">github下载链接</a></p><p>From <a href="https://github.com/BtbN/FFmpeg-Builds/">https://github.com/BtbN/FFmpeg-Builds/</a> 的文档：</p><h1 id="ffmpeg-static-auto-builds"><a class="markdownIt-Anchor" href="#ffmpeg-static-auto-builds"></a> FFmpeg Static Auto-Builds</h1><p>Static Windows (x86_64) and Linux (x86_64) Builds of ffmpeg master and latest release branch.</p><p>Windows builds are targetting Windows 7 and newer.</p><p>Linux (x86_64) builds are targetting Ubuntu 16.04 (glibc-2.23 + linux-4.4) and anything more recent.</p><p>Linux (arm64) builds are targetting Ubuntu 18.04 (glibc-2.27 + linux-4.15) and anything more recent.</p><h2 id="auto-builds"><a class="markdownIt-Anchor" href="#auto-builds"></a> Auto-Builds</h2><p>Builds run daily at 12:00 UTC (or GitHubs idea of that time) and are automatically released on success.</p><p><strong>Auto-Builds run ONLY for win64 and linux(arm)64. There are no win32/x86 auto-builds, though you can produce win32 builds yourself following the instructions below.</strong></p><h3 id="release-retention-policy"><a class="markdownIt-Anchor" href="#release-retention-policy"></a> Release Retention Policy</h3><ul><li>The last build of each month is kept for two years.</li><li>The last 14 daily builds are kept.</li><li>The special “latest” build floats and provides consistent URLs always pointing to the latest build.</li></ul><h2 id="package-list"><a class="markdownIt-Anchor" href="#package-list"></a> Package List</h2><p>For a list of included dependencies check the scripts.d directory.<br />Every file corresponds to its respective package.</p><h2 id="how-to-make-a-build"><a class="markdownIt-Anchor" href="#how-to-make-a-build"></a> How to make a build</h2><h3 id="prerequisites"><a class="markdownIt-Anchor" href="#prerequisites"></a> Prerequisites</h3><ul><li>bash</li><li>docker</li></ul><h3 id="build-image"><a class="markdownIt-Anchor" href="#build-image"></a> Build Image</h3><ul><li><code>./makeimage.sh target variant [addin [addin] [addin] ...]</code></li></ul><h3 id="build-ffmpeg"><a class="markdownIt-Anchor" href="#build-ffmpeg"></a> Build FFmpeg</h3><ul><li><code>./build.sh target variant [addin [addin] [addin] ...]</code></li></ul><p>On success, the resulting zip file will be in the <code>artifacts</code> subdir.</p><h3 id="targets-variants-and-addins"><a class="markdownIt-Anchor" href="#targets-variants-and-addins"></a> Targets, Variants and Addins</h3><p>Available targets:</p><ul><li><code>win64</code> (x86_64 Windows)</li><li><code>win32</code> (x86 Windows)</li><li><code>linux64</code> (x86_64 Linux, glibc&gt;=2.23, linux&gt;=4.4)</li><li><code>linuxarm64</code> (arm64 (aarch64) Linux, glibc&gt;=2.27, linux&gt;=4.15)</li></ul><p>The linuxarm64 target will not build some dependencies due to lack of arm64 (aarch64) architecture support or cross-compiling restrictions.</p><ul><li><code>davs2</code> and <code>xavs2</code>: aarch64 support is broken.</li><li><code>libmfx</code> and <code>libva</code>: Library for Intel QSV, so there is no aarch64 support.</li></ul><p>Available variants:</p><ul><li><code>gpl</code> Includes all dependencies, even those that require full GPL instead of just LGPL.</li><li><code>lgpl</code> Lacking libraries that are GPL-only. Most prominently libx264 and libx265.</li><li><code>nonfree</code> Includes fdk-aac in addition to all the dependencies of the gpl variant.</li><li><code>gpl-shared</code> Same as gpl, but comes with the libav* family of shared libs instead of pure static executables.</li><li><code>lgpl-shared</code> Same again, but with the lgpl set of dependencies.</li><li><code>nonfree-shared</code> Same again, but with the nonfree set of dependencies.</li></ul><p>All of those can be optionally combined with any combination of addins:</p><ul><li><code>4.4</code> to build from the 4.4 release branch instead of master.</li><li><code>5.0</code> to build from the 5.0 release branch instead of master.</li><li><code>5.1</code> to build from the 5.1 release branch instead of master.</li><li><code>debug</code> to not strip debug symbols from the binaries. This increases the output size by about 250MB.</li><li><code>lto</code> build all dependencies and ffmpeg with -flto=auto (HIGHLY EXPERIMENTAL, broken for Windows, sometimes works for Linux)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ffmpeg-预编译的libray和可执行程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ffmpeg-预编译的libray和可执行程序&quot;&gt;&lt;/a&gt; FFmpeg 预编译的libray和可执行程序&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="tools" scheme="http://gaclove.github.io/categories/tools/"/>
    
    
    <category term="ffmpeg" scheme="http://gaclove.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Flask快速上手</title>
    <link href="http://gaclove.github.io/flask%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://gaclove.github.io/flask%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2021-05-10T10:34:36.000Z</published>
    <updated>2023-10-16T10:32:25.433Z</updated>
    
    <content type="html"><![CDATA[<!-- Flask的核心概念应用实例应用实例可以通过属性或者方法来配置Flask应用的行为。常见的配置选项包括：DEBUG：设置为True时，启用调试模式。SECRET_KEY：设置一个随机的字符串作为加密密钥，用于保证安全。SQLALCHEMY_DATABASE_URI：设置数据库的连接字符串。WTF_CSRF_ENABLED：启用或禁用跨站请求伪造保护。路由@app.route('/login', methods=['GET', 'POST'])Flask的路由规则是按照定义的顺序进行匹配的，因此要注意路由定义的顺序。模板 （渲染视图返回的结果）视图 route 函数，将函数同视图关联起来上下文对象请求请求对象是一个全局对象， 方法、URL、请求头、请求体， 并将它们作为字符串返回。request.headers：获取请求头。request.url：获取请求URL。request.remote_addr：获取客户端的IP地址。request.method：获取请求方法。request.cookies：获取请求的Cookie。request.args：获取GET请求的参数。request.form：获取POST请求的参数。request.values 集合了 args/formrequest.data：获取请求体。request.form 属性获取POST请求的参数request.get_json() 获取jsonrequest.files：获取上传的文件。request.is_xhr：判断请求是否为Ajax响应等知识响应内容、HTTP状态码、响应头make_response()：创建一个响应对象。response.data：设置响应内容。response.status_code：设置HTTP状态码。response.headers：设置响应头。response.set_cookie()：设置Cookie。response.delete_cookie()：删除Cookie。response.content_type：设置响应类型。response.content_length：设置响应内容长度。json的返回方式jsonify()  的功能类似下面的功能data = {    "status": 0,    "message": "success",    "data":        {"name": "tigeriaf",            "age": 24            }}json.dumps(data, separators=(',', ':')) #去掉空格之类response = make_response(json_data)response.mimetype = "applcation/json"    flask 的g对象MIME 知识扩展使用，比如Flask-WTF、Flask-Login、Flask-SQLAlchemy等使用Blueprints来组织代码使用Flask-RESTful开发APFlask部署 --><h2 id="xx"><a class="markdownIt-Anchor" href="#xx"></a> xx</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 启动命令中添加 Gunicorn 的 <span class="token parameter variable">--reload</span> 选项，这将启用 Gunicorn 的自动重载功能，并在代码更改时重新启动应用程序gunicorn <span class="token parameter variable">--bind</span> <span class="token number">0.0</span>.0.0:8000 <span class="token parameter variable">--reload</span>  --access-logfile <span class="token string">'-'</span> app:app<span class="token number">2</span>. 设置 Flask 应用程序的 debug 标志，以便在调试模式下运行应用程序。<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token builtin class-name">:</span>    app.run<span class="token punctuation">(</span>debug<span class="token operator">=</span>True<span class="token punctuation">)</span><span class="token number">3</span>. 使用 Flask 的调试器，您需要禁用 Gunicorn 的访问日志，以便在控制台上查看调试器输出。gunicorn <span class="token parameter variable">--bind</span> <span class="token number">0.0</span>.0.0:8000 <span class="token parameter variable">--reload</span> --access-logfile <span class="token string">'-'</span> app:app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程调试flask"><a class="markdownIt-Anchor" href="#远程调试flask"></a> 远程调试flask</h2><p>参考：<a href="https://dev.to/pacheco/dockerize-a-flask-app-and-debug-with-vscode-34i1">https://dev.to/pacheco/dockerize-a-flask-app-and-debug-with-vscode-34i1</a></p><p>launch.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Python: Remote Attach"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">5678</span><span class="token punctuation">,</span>            <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>            <span class="token property">"pathMappings"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"localRoot"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>                    <span class="token property">"remoteRoot"</span><span class="token operator">:</span> <span class="token string">"/code"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">FLASK_APP</span><span class="token punctuation">:</span> manage<span class="token punctuation">:</span>app<span class="token key atrule">entrypoint</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span>    <span class="token string">"python"</span><span class="token punctuation">,</span>    <span class="token string">"-m"</span><span class="token punctuation">,</span>    <span class="token string">"debugpy"</span><span class="token punctuation">,</span>    <span class="token string">"--listen"</span><span class="token punctuation">,</span>    <span class="token string">"0.0.0.0:5678"</span><span class="token punctuation">,</span>    <span class="token string">"-m"</span><span class="token punctuation">,</span>    <span class="token string">"manage"</span><span class="token punctuation">,</span>    <span class="token string">"--wait-for-client"</span><span class="token punctuation">,</span>    <span class="token string">"--multiprocess"</span><span class="token punctuation">,</span>    <span class="token string">"-m"</span><span class="token punctuation">,</span>    <span class="token string">"flask"</span><span class="token punctuation">,</span>    <span class="token string">"run"</span><span class="token punctuation">,</span>    <span class="token string">"-h"</span><span class="token punctuation">,</span>    <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"-p"</span><span class="token punctuation">,</span>    <span class="token string">"5000"</span>  <span class="token punctuation">]</span><span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 5000<span class="token punctuation">:</span><span class="token number">5000</span>  <span class="token punctuation">-</span> 5678<span class="token punctuation">:</span><span class="token number">5678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中文返回<br />app.config[“JSON_AS_ASCII”] = False<br />app.config[“RESTFUL_JSON”] = {“ensure_ascii”: False}</p><p>session中概念<br />id, name<br />S: session ID 通过cookie 给出</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- 
Flask的核心概念
应用实例
应用实例可以通过属性或者方法来配置Flask应用的行为。常见的配置选项包括：
DEBUG：设置为True时，启用调试模式。
SECRET_KEY：设置一个随机的字符串作为加密密钥，用于保证安全。
SQLALCHEMY_DATABASE_</summary>
      
    
    
    
    <category term="tools" scheme="http://gaclove.github.io/categories/tools/"/>
    
    
    <category term="python web flask" scheme="http://gaclove.github.io/tags/python-web-flask/"/>
    
  </entry>
  
  <entry>
    <title>CUDA常见错误排查</title>
    <link href="http://gaclove.github.io/CUDA%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/"/>
    <id>http://gaclove.github.io/CUDA%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/</id>
    <published>2019-12-27T13:18:12.000Z</published>
    <updated>2023-10-16T10:32:25.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见的错误说明"><a class="markdownIt-Anchor" href="#常见的错误说明"></a> 常见的错误说明</h2><p><a href="https://zhuanlan.zhihu.com/p/360727546">https://zhuanlan.zhihu.com/p/360727546</a></p><h2 id="排查工具"><a class="markdownIt-Anchor" href="#排查工具"></a> 排查工具</h2><ul><li>cuda-memcheck，在cuda11.0 之后就不建议使用了。</li><li>CUDA11.0 之后提供了 compute-sanitizer, 具体使用参考官方示例： <a href="https://github.com/NVIDIA/compute-sanitizer-samples">https://github.com/NVIDIA/compute-sanitizer-samples</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常见的错误说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常见的错误说明&quot;&gt;&lt;/a&gt; 常见的错误说明&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/360727546&quot;&gt;https://</summary>
      
    
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/categories/NVIDIA/"/>
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>弱符号_弱引用</title>
    <link href="http://gaclove.github.io/%E5%BC%BA%E5%BC%B1%E7%AC%A6%E5%8F%B7_%E5%BC%BA%E5%BC%B1%E5%BC%95%E7%94%A8/"/>
    <id>http://gaclove.github.io/%E5%BC%BA%E5%BC%B1%E7%AC%A6%E5%8F%B7_%E5%BC%BA%E5%BC%B1%E5%BC%95%E7%94%A8/</id>
    <published>2019-04-30T14:28:10.000Z</published>
    <updated>2023-10-16T10:32:25.433Z</updated>
    
    <content type="html"><![CDATA[<p>弱符号、弱引用的扩展机制在库的实现中非常有用。我们在库中可以使用弱符号和弱引用机制，这样对于一个弱符号函数而言，用户可以自定义扩展功能的函数来覆盖这个弱符号函数。<br />同时我们可以将某些扩展功能函数定义为弱引用，当用户需要使用扩展功能时，就对其进行定义，链接到程序当中，如果用户不进行定义，则链接也不会报错，这使得库的功能可以很方便地进行裁剪和组合。</p><h2 id="弱符号示例"><a class="markdownIt-Anchor" href="#弱符号示例"></a> 弱符号示例</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; test.hvoid test_func(void) &#123; weak_func(); &#125;&#x2F;&#x2F; test.c#include &lt;stdio.h&gt;void __attribute__((weak)) weak_func(void) &#123;  printf(&quot;defualt weak func is running!\n&quot;);&#125;void test_func(void) &#123; weak_func(); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用弱符号"><a class="markdownIt-Anchor" href="#使用弱符号"></a> 使用弱符号</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; main.c#include &lt;stdio.h&gt;#include &quot;test.h&quot;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F; ❯ .&#x2F;test &#x2F;&#x2F; defualt weak func is running!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外部强符号覆盖弱符号"><a class="markdownIt-Anchor" href="#外部强符号覆盖弱符号"></a> 外部强符号，覆盖弱符号</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; main.c#include &lt;stdio.h&gt;#include &quot;test.h&quot;void weak_func(void)&#123;    printf(&quot;custom strong func override!\n&quot;);&#125;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F;❯ .&#x2F;test &#x2F;&#x2F;custom strong func override!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="弱引用示例"><a class="markdownIt-Anchor" href="#弱引用示例"></a> 弱引用示例</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;test.hvoid test_func(void);&#x2F;&#x2F;test.c#include &lt;stdio.h&gt;&#x2F;&#x2F; 具体定义： https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-4.3.6&#x2F;gcc&#x2F;Function-Attributes.htmlstatic __attribute__((weakref(&quot;test&quot;))) void weak_ref(void);void test_func(void) &#123;  if (weak_ref) &#123;    weak_ref();  &#125; else &#123;    printf(&quot;weak ref function is null\n&quot;);  &#125;&#125;&#x2F;&#x2F;build command &#x3D;&gt; libtest.agcc -c test.c; ar -rsc libtest.a test.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.c</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 使用默认#include &lt;stdio.h&gt;#include &lt;stdarg.h&gt;#include &quot;test.h&quot;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F;gcc main.c test.h -L. -ltest -o test&#x2F;&#x2F;&gt; weak ref function is null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 使用外部定义#include &lt;stdio.h&gt;#include &lt;stdarg.h&gt;#include &quot;test.h&quot;void test(void) &#123; printf(&quot;running custom weak ref function!\n&quot;); &#125;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F;gcc main.c test.h -L. -ltest -o test&#x2F;&#x2F;&gt; running custom weak ref function!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;弱符号、弱引用的扩展机制在库的实现中非常有用。我们在库中可以使用弱符号和弱引用机制，这样对于一个弱符号函数而言，用户可以自定义扩展功能的函数来覆盖这个弱符号函数。&lt;br /&gt;
同时我们可以将某些扩展功能函数定义为弱引用，当用户需要使用扩展功能时，就对其进行定义，链接到程序当</summary>
      
    
    
    
    <category term="GCC" scheme="http://gaclove.github.io/categories/GCC/"/>
    
    
    <category term="Linux GCC" scheme="http://gaclove.github.io/tags/Linux-GCC/"/>
    
  </entry>
  
  <entry>
    <title>nvidia-smi常用命令</title>
    <link href="http://gaclove.github.io/nvidia-smi%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://gaclove.github.io/nvidia-smi%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2018-07-30T12:28:18.000Z</published>
    <updated>2023-10-16T10:32:25.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="支持的可选项"><a class="markdownIt-Anchor" href="#支持的可选项"></a> 支持的可选项</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">MEMORY, UTILIZATION, ECC, TEMPERATURE, POWER, CLOCK,COMPUTE, PIDS, PERFORMANCE, SUPPORTED_CLOCKS,PAGE_RETIREMENT, ACCOUNTING, ENCODER_STATS,SUPPORTED_GPU_TARGET_TEMP, VOLTAGEFBC_STATS, ROW_REMAPPER 查询某项的值nvidia-smi -q -d &lt;xxx>示例：#查询MEM,SM 最大频率 nvidia-smi -q -d CLOCK <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置mem-sm-频率用于性能测试"><a class="markdownIt-Anchor" href="#设置mem-sm-频率用于性能测试"></a> 设置MEM, SM 频率（用于性能测试）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询当前卡的频率</span>nvidia-smi <span class="token parameter variable">-q</span> <span class="token parameter variable">-d</span> CLOCK <span class="token comment"># 锁定频率</span>nvidia-smi <span class="token parameter variable">-ac</span> <span class="token number">5001,1590</span><span class="token comment"># 重置到 auto</span>nvidia-smi <span class="token parameter variable">-rac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="windows上多个cuda切换"><a class="markdownIt-Anchor" href="#windows上多个cuda切换"></a> Windows上多个CUDA切换</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># window 平台切换 cuda 版本 (powershell)</span><span class="token variable">$env</span>:CUDA_PATH<span class="token operator">=</span><span class="token string">"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA<span class="token entity" title="\v">\v</span>&lt;xxx>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查询gpu各资源的利用率"><a class="markdownIt-Anchor" href="#查询gpu各资源的利用率"></a> 查询GPU各资源的利用率</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 间隔1s 输出0号卡各状态</span>nvidia-smi dmon <span class="token parameter variable">-i</span> <span class="token number">0</span> <span class="token parameter variable">-d</span> <span class="token number">1</span>输出示例:<span class="token comment"># gpu   pwr gtemp mtemp    sm   mem   enc   dec  mclk  pclk</span><span class="token comment"># Idx     W     C     C     %     %     %     %   MHz   MHz</span>    <span class="token number">0</span>    <span class="token number">15</span>    <span class="token number">88</span>     -     <span class="token number">0</span>     <span class="token number">7</span>     <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">405</span>   <span class="token number">139</span>    <span class="token number">0</span>    <span class="token number">11</span>    <span class="token number">88</span>     -     <span class="token number">0</span>     <span class="token number">6</span>     <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">405</span>   <span class="token number">151</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;支持的可选项&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#支持的可选项&quot;&gt;&lt;/a&gt; 支持的可选项&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-text&quot; data-language=&quot;text&quot;&gt;&lt;c</summary>
      
    
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/categories/NVIDIA/"/>
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>GCC常用选项</title>
    <link href="http://gaclove.github.io/GCC%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9/"/>
    <id>http://gaclove.github.io/GCC%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9/</id>
    <published>2018-04-30T12:28:18.000Z</published>
    <updated>2023-10-16T10:32:25.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令常用"><a class="markdownIt-Anchor" href="#命令常用"></a> 命令常用</h2><p>Gcc 命令本身就有很多可以使用文档， 如果对编译和链接过程需要有详细控制的，可以细看 gcc 文档</p><pre class="line-numbers language-none"><code class="language-none">gcc -dumpmachine # 打印当前机器信息, 示例： # output: x86_64-linux-gnugcc -print-search-dirs # 打印搜索路径gcc --help&#x3D;target # 可以查看可以详细控制的选项# 查看当前C++编译器 ABI 兼容问题, 参考： # https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;using_dual_abi.htmlecho &#39;#include &lt;string&gt; &#39; | g++ -dM -E -x c++ - | grep _GLIBCXX_USE_CXX11_ABI# 查看当前C++编译器是否支持symbol version# https:&#x2F;&#x2F;refspecs.linuxfoundation.org&#x2F;LSB_3.0.0&#x2F;LSB-PDA&#x2F;LSB-PDA.junk&#x2F;symversion.htmlecho &#39;#include &lt;string&gt; &#39; | g++ -dM -E -x c++ - | grep  _GLIBCXX_SYMVER  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译常见"><a class="markdownIt-Anchor" href="#编译常见"></a> 编译常见</h2><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安全相关的编译选项"><a class="markdownIt-Anchor" href="#安全相关的编译选项"></a> 安全相关的编译选项</h2><p>在编译器层面，gcc提供了不少安全方面的编译选项，主要有：</p><pre class="line-numbers language-none"><code class="language-none"># NX(DEP)-z execstack  # 禁用NX保护-z noexecstack # 开启NX保护| 堆栈禁止执行 # RELRO-z norelro # 关闭-z lazy # 部分开启-z now # 全部开启| GOT写保护 # CANARY-fno -stack-protector # 禁用-fstack-protector # 开启-fstack-protector-all # 完全开启| 堆栈溢出哨兵 # FORTIFY-D_FORTIFY_SOURCE &#x3D;1 # 较弱的检查-D_FORTIFY_SOURCE&#x3D;2 # 较强的检查| 常用函数加强检查 # PIE(ASLR)-fpie -pie # 开启PIE，此时强度为1-fPIE -pie # 开启PIE，此时为最高强度2| 代码段、数据段地址随机化 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> Ref</h2><ul><li><a href="https://blog.csdn.net/pwl999/article/details/111035160">Gcc 安全编译选项</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命令常用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#命令常用&quot;&gt;&lt;/a&gt; 命令常用&lt;/h2&gt;
&lt;p&gt;Gcc 命令本身就有很多可以使用文档， 如果对编译和链接过程需要有详细控制的，可以细看 gcc 文档&lt;/p&gt;
&lt;pre class=</summary>
      
    
    
    
    <category term="GCC" scheme="http://gaclove.github.io/categories/GCC/"/>
    
    
    <category term="Linux GCC" scheme="http://gaclove.github.io/tags/Linux-GCC/"/>
    
  </entry>
  
</feed>
