<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://gaclove.github.io/atom.xml" rel="self"/>
  
  <link href="http://gaclove.github.io/"/>
  <updated>2023-02-03T07:30:45.579Z</updated>
  <id>http://gaclove.github.io/</id>
  
  <author>
    <name>gaopeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CUDA常见错误排查</title>
    <link href="http://gaclove.github.io/CUDA%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/"/>
    <id>http://gaclove.github.io/CUDA%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/</id>
    <published>2019-12-27T13:18:12.000Z</published>
    <updated>2023-02-03T07:30:45.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见的错误说明"><a class="markdownIt-Anchor" href="#常见的错误说明"></a> 常见的错误说明</h2><p><a href="https://zhuanlan.zhihu.com/p/360727546">https://zhuanlan.zhihu.com/p/360727546</a></p><h2 id="排查工具"><a class="markdownIt-Anchor" href="#排查工具"></a> 排查工具</h2><ul><li>cuda-memcheck，在cuda11.0 之后就不建议使用了。</li><li>CUDA11.0 之后提供了 compute-sanitizer, 具体使用参考官方示例： <a href="https://github.com/NVIDIA/compute-sanitizer-samples">https://github.com/NVIDIA/compute-sanitizer-samples</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常见的错误说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常见的错误说明&quot;&gt;&lt;/a&gt; 常见的错误说明&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/360727546&quot;&gt;https://</summary>
      
    
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/categories/NVIDIA/"/>
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>弱符号_弱引用</title>
    <link href="http://gaclove.github.io/%E5%BC%BA%E5%BC%B1%E7%AC%A6%E5%8F%B7_%E5%BC%BA%E5%BC%B1%E5%BC%95%E7%94%A8/"/>
    <id>http://gaclove.github.io/%E5%BC%BA%E5%BC%B1%E7%AC%A6%E5%8F%B7_%E5%BC%BA%E5%BC%B1%E5%BC%95%E7%94%A8/</id>
    <published>2019-04-30T14:28:10.000Z</published>
    <updated>2023-02-03T07:30:45.579Z</updated>
    
    <content type="html"><![CDATA[<p>弱符号、弱引用的扩展机制在库的实现中非常有用。我们在库中可以使用弱符号和弱引用机制，这样对于一个弱符号函数而言，用户可以自定义扩展功能的函数来覆盖这个弱符号函数。<br />同时我们可以将某些扩展功能函数定义为弱引用，当用户需要使用扩展功能时，就对其进行定义，链接到程序当中，如果用户不进行定义，则链接也不会报错，这使得库的功能可以很方便地进行裁剪和组合。</p><h2 id="弱符号示例"><a class="markdownIt-Anchor" href="#弱符号示例"></a> 弱符号示例</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; test.hvoid test_func(void) &#123; weak_func(); &#125;&#x2F;&#x2F; test.c#include &lt;stdio.h&gt;void __attribute__((weak)) weak_func(void) &#123;  printf(&quot;defualt weak func is running!\n&quot;);&#125;void test_func(void) &#123; weak_func(); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用弱符号"><a class="markdownIt-Anchor" href="#使用弱符号"></a> 使用弱符号</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; main.c#include &lt;stdio.h&gt;#include &quot;test.h&quot;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F; ❯ .&#x2F;test &#x2F;&#x2F; defualt weak func is running!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外部强符号覆盖弱符号"><a class="markdownIt-Anchor" href="#外部强符号覆盖弱符号"></a> 外部强符号，覆盖弱符号</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; main.c#include &lt;stdio.h&gt;#include &quot;test.h&quot;void weak_func(void)&#123;    printf(&quot;custom strong func override!\n&quot;);&#125;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F;❯ .&#x2F;test &#x2F;&#x2F;custom strong func override!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="弱引用示例"><a class="markdownIt-Anchor" href="#弱引用示例"></a> 弱引用示例</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;test.hvoid test_func(void);&#x2F;&#x2F;test.c#include &lt;stdio.h&gt;&#x2F;&#x2F; 具体定义： https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-4.3.6&#x2F;gcc&#x2F;Function-Attributes.htmlstatic __attribute__((weakref(&quot;test&quot;))) void weak_ref(void);void test_func(void) &#123;  if (weak_ref) &#123;    weak_ref();  &#125; else &#123;    printf(&quot;weak ref function is null\n&quot;);  &#125;&#125;&#x2F;&#x2F;build command &#x3D;&gt; libtest.agcc -c test.c; ar -rsc libtest.a test.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.c</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 使用默认#include &lt;stdio.h&gt;#include &lt;stdarg.h&gt;#include &quot;test.h&quot;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F;gcc main.c test.h -L. -ltest -o test&#x2F;&#x2F;&gt; weak ref function is null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 使用外部定义#include &lt;stdio.h&gt;#include &lt;stdarg.h&gt;#include &quot;test.h&quot;void test(void) &#123; printf(&quot;running custom weak ref function!\n&quot;); &#125;int main() &#123;  test_func();  return 0;&#125;&#x2F;&#x2F;gcc main.c test.h -L. -ltest -o test&#x2F;&#x2F;&gt; running custom weak ref function!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;弱符号、弱引用的扩展机制在库的实现中非常有用。我们在库中可以使用弱符号和弱引用机制，这样对于一个弱符号函数而言，用户可以自定义扩展功能的函数来覆盖这个弱符号函数。&lt;br /&gt;
同时我们可以将某些扩展功能函数定义为弱引用，当用户需要使用扩展功能时，就对其进行定义，链接到程序当</summary>
      
    
    
    
    <category term="GCC" scheme="http://gaclove.github.io/categories/GCC/"/>
    
    
    <category term="Linux GCC" scheme="http://gaclove.github.io/tags/Linux-GCC/"/>
    
  </entry>
  
  <entry>
    <title>nvidia-smi常用命令</title>
    <link href="http://gaclove.github.io/nvidia-smi%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://gaclove.github.io/nvidia-smi%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2018-07-30T12:28:18.000Z</published>
    <updated>2023-02-03T07:30:45.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="支持的可选项"><a class="markdownIt-Anchor" href="#支持的可选项"></a> 支持的可选项</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">MEMORY, UTILIZATION, ECC, TEMPERATURE, POWER, CLOCK,COMPUTE, PIDS, PERFORMANCE, SUPPORTED_CLOCKS,PAGE_RETIREMENT, ACCOUNTING, ENCODER_STATS,SUPPORTED_GPU_TARGET_TEMP, VOLTAGEFBC_STATS, ROW_REMAPPER 查询某项的值nvidia-smi -q -d &lt;xxx>示例：#查询MEM,SM 最大频率 nvidia-smi -q -d CLOCK <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置mem-sm-频率用于性能测试"><a class="markdownIt-Anchor" href="#设置mem-sm-频率用于性能测试"></a> 设置MEM, SM 频率（用于性能测试）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询当前卡的频率</span>nvidia-smi <span class="token parameter variable">-q</span> <span class="token parameter variable">-d</span> CLOCK <span class="token comment"># 锁定频率</span>nvidia-smi <span class="token parameter variable">-ac</span> <span class="token number">5001,1590</span><span class="token comment"># 重置到 auto</span>nvidia-smi <span class="token parameter variable">-rac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="windows上多个cuda切换"><a class="markdownIt-Anchor" href="#windows上多个cuda切换"></a> Windows上多个CUDA切换</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># window 平台切换 cuda 版本 (powershell)</span><span class="token variable">$env</span>:CUDA_PATH<span class="token operator">=</span><span class="token string">"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA<span class="token entity" title="\v">\v</span>&lt;xxx>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查询gpu各资源的利用率"><a class="markdownIt-Anchor" href="#查询gpu各资源的利用率"></a> 查询GPU各资源的利用率</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 间隔1s 输出0号卡各状态</span>nvidia-smi dmon <span class="token parameter variable">-i</span> <span class="token number">0</span> <span class="token parameter variable">-d</span> <span class="token number">1</span>输出示例:<span class="token comment"># gpu   pwr gtemp mtemp    sm   mem   enc   dec  mclk  pclk</span><span class="token comment"># Idx     W     C     C     %     %     %     %   MHz   MHz</span>    <span class="token number">0</span>    <span class="token number">15</span>    <span class="token number">88</span>     -     <span class="token number">0</span>     <span class="token number">7</span>     <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">405</span>   <span class="token number">139</span>    <span class="token number">0</span>    <span class="token number">11</span>    <span class="token number">88</span>     -     <span class="token number">0</span>     <span class="token number">6</span>     <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">405</span>   <span class="token number">151</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;支持的可选项&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#支持的可选项&quot;&gt;&lt;/a&gt; 支持的可选项&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-text&quot; data-language=&quot;text&quot;&gt;&lt;c</summary>
      
    
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/categories/NVIDIA/"/>
    
    
    <category term="NVIDIA" scheme="http://gaclove.github.io/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>GCC常用选项</title>
    <link href="http://gaclove.github.io/GCC%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9/"/>
    <id>http://gaclove.github.io/GCC%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9/</id>
    <published>2018-04-30T12:28:18.000Z</published>
    <updated>2023-02-03T07:30:45.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令常用"><a class="markdownIt-Anchor" href="#命令常用"></a> 命令常用</h2><p>Gcc 命令本身就有很多可以使用文档， 如果对编译和链接过程需要有详细控制的，可以细看 gcc 文档</p><pre class="line-numbers language-none"><code class="language-none">gcc -dumpmachine # 打印当前机器信息, 示例： # output: x86_64-linux-gnugcc -print-search-dirs # 打印搜索路径gcc --help&#x3D;target # 可以查看可以详细控制的选项# 查看当前C++编译器 ABI 兼容问题, 参考： # https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;using_dual_abi.htmlecho &#39;#include &lt;string&gt; &#39; | g++ -dM -E -x c++ - | grep _GLIBCXX_USE_CXX11_ABI# 查看当前C++编译器是否支持symbol version# https:&#x2F;&#x2F;refspecs.linuxfoundation.org&#x2F;LSB_3.0.0&#x2F;LSB-PDA&#x2F;LSB-PDA.junk&#x2F;symversion.htmlecho &#39;#include &lt;string&gt; &#39; | g++ -dM -E -x c++ - | grep  _GLIBCXX_SYMVER  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译常见"><a class="markdownIt-Anchor" href="#编译常见"></a> 编译常见</h2><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安全相关的编译选项"><a class="markdownIt-Anchor" href="#安全相关的编译选项"></a> 安全相关的编译选项</h2><p>在编译器层面，gcc提供了不少安全方面的编译选项，主要有：</p><pre class="line-numbers language-none"><code class="language-none"># NX(DEP)-z execstack  # 禁用NX保护-z noexecstack # 开启NX保护| 堆栈禁止执行 # RELRO-z norelro # 关闭-z lazy # 部分开启-z now # 全部开启| GOT写保护 # CANARY-fno -stack-protector # 禁用-fstack-protector # 开启-fstack-protector-all # 完全开启| 堆栈溢出哨兵 # FORTIFY-D_FORTIFY_SOURCE &#x3D;1 # 较弱的检查-D_FORTIFY_SOURCE&#x3D;2 # 较强的检查| 常用函数加强检查 # PIE(ASLR)-fpie -pie # 开启PIE，此时强度为1-fPIE -pie # 开启PIE，此时为最高强度2| 代码段、数据段地址随机化 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> Ref</h2><ul><li><a href="https://blog.csdn.net/pwl999/article/details/111035160">Gcc 安全编译选项</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命令常用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#命令常用&quot;&gt;&lt;/a&gt; 命令常用&lt;/h2&gt;
&lt;p&gt;Gcc 命令本身就有很多可以使用文档， 如果对编译和链接过程需要有详细控制的，可以细看 gcc 文档&lt;/p&gt;
&lt;pre class=</summary>
      
    
    
    
    <category term="GCC" scheme="http://gaclove.github.io/categories/GCC/"/>
    
    
    <category term="Linux GCC" scheme="http://gaclove.github.io/tags/Linux-GCC/"/>
    
  </entry>
  
</feed>
